#!/bin/bash

# Check for argument and show usage 
if [ -z "$1" ]; then
  echo "Usage: $0 <filename>"
  exit 1
fi

file="$1"

# Read tab as delimiter
awk -F'\t' ' 
{
  # Split column mechanics using comma into an array mech_array
  split($13, mech_array, ",")
  for (m in mech_array) {
    # Remove whitespaces
    gsub(/^ +| +$/, "", mech_array[m])
    # If array is not empty, accumulate value
    if (mech_array[m] != "") mech_count[mech_array[m]]++
  } 

  # Split column mechanics using comma into an array dom_array
  split($14, dom_array, ",")
  for (d in dom_array) {
    # Remove whitespaces
    gsub(/^ +| +$/, "", dom_array[d])
    # If array is not empty, accumulate value
    if (dom_array[d] != "") dom_count[dom_array[d]]++
  }

  # Pearson Year to Rating
  # If year is integer and rating is float, store to variables for pearson calculation
  if ($3 ~ /^[0-9]+$/ && $9 ~ /^[0-9.]+$/) {
    year = $3 + 0
    rating = $9 + 0

    sum_year += year
    sum_rating += rating
    sum_year_sq += year^2
    sum_rating_sq += rating^2
    sum_year_rating += year * rating
    count++
  }

  # Pearson Complexity to Rating
  # If year is integer and rating is float, store to variables for pearson calculation
  if ($11 ~ /^[0-9.]+$/ && $9 ~ /^[0-9.]+$/) {
    complexity = $11 + 0
    rating2 = $9 + 0

    sum_complexity += complexity
    sum_rating2 += rating2
    sum_complexity_sq += complexity^2
    sum_rating2_sq += rating2^2
    sum_complexity_rating += complexity * rating2
    count2++
  }
}
END {
  # Highest occurence mechanics
  for (m in mech_count) {
    if (mech_count[m] > max_mech_count) {
      max_mech = m
      max_mech_count = mech_count[m]
    }
  }

  # Highest occurence domains
  for (d in dom_count) {
    if (dom_count[d] > max_dom_count) {
      max_dom = d
      max_dom_count = dom_count[d]
    }
  }

  # Pearson Year to Rating
  mean_year = sum_year / count
  mean_rating = sum_rating / count
  numerator1 = sum_year_rating - (sum_year * sum_rating) / count
  denominator1 = sqrt((sum_year_sq - (sum_year^2) / count) * (sum_rating_sq - (sum_rating^2) / count))
  pearson1 = (denominator1 == 0) ? 0 : numerator1 / denominator1

  # Pearson Complexity to Rating
  mean_complexity = sum_complexity / count2
  mean_rating2 = sum_rating2 / count2
  numerator2 = sum_complexity_rating - (sum_complexity * sum_rating2) / count2
  denominator2 = sqrt((sum_complexity_sq - (sum_complexity^2) / count2) * (sum_rating2_sq - (sum_rating2^2) / count2))
  pearson2 = (denominator2 == 0) ? 0 : numerator2 / denominator2

  # Output
  print "The most popular game mechanics is " max_mech " found in " max_mech_count " games."
  print "The most game domain is " max_dom " found in " max_dom_count " games."
  printf "The correlation between the year of publication and the average rating is %.3f\n", pearson1
  printf "The correlation between the complexity of a game and and its average rating is %.3f\n", pearson2
}
' "$file"
