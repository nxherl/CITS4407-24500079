#!/bin/bash
# Check for argument and show usage 
if [ -z "$1" ]; then
  echo "Usage: $0 <filename>"
  exit 1
fi
#===========================DATA CLEANING==================================
# Convert semicolon to tab as delimiter, convert CRLF, convert decimal, delete non-ASCII. Store to variable cleaned
cleaned=$(cat "$1" | tr ';' '\t' | tr -d '\r' | sed 's/\([0-9]\),\([0-9]\)/\1.\2/g' | tr -cd '\0-\177')
header=$(echo "$cleaned" | head -n 1)
data=$(echo "$cleaned" | tail -n +2)

# Get highest value from first column
max_id=$(echo "$cleaned" | cut -f1 | grep -E '^[0-9]+$' | sort -n | tail -n 1 )
next_id=$((max_id + 1))

# Process each line in the cleaned data
final=$(echo "$data" | while IFS=$'\t' read -r first_column rest; do
    # If first column is not number then add next_id. Else print as is.
    if [[ ! "$first_column" =~ ^[0-9]+$ ]]; then
        echo -e "${next_id}\t$first_column\t$rest"
        next_id=$((next_id + 1))
    else
        echo -e "$first_column\t$rest"
    fi
done)


#===========================STORE OCCURENCES INTO ARRAYS==================================
# Store the rows per column into variables 
mechanics_column=$(echo "$final" | cut -f13)
domain_column=$(echo "$final" | cut -f14)

# Array placeholders to store occurence counts
declare -A mechanic_counts
declare -A domain_counts

# Read each line of column and store into variable line_mech
while IFS= read -r line_mech; do
  # Read from variable line_mech, split line by comma delimiter and store into array mechanics
  IFS=',' read -r -a mechanics <<< "$line_mech"
  for mechanic in "${mechanics[@]}"; do
    # Delete whitespaces before and after values
    cleaned_mechanic=$(echo "$mechanic" | xargs)
    # If not empty, then add array counts as per values encountered
    if [[ -n "$cleaned_mechanic" ]]; then
      ((mechanic_counts["$cleaned_mechanic"]++))
    fi
  done
done <<< "$mechanics_column"

# Read each line of column and store into variable line_dom
while IFS= read -r line_dom; do
  # Read from variable line_dom, split line by comma delimiter and store into array domains
  IFS=',' read -r -a domains <<< "$line_dom"
  for domain in "${domains[@]}"; do
    # Delete whitespaces before and after values
    cleaned_domains=$(echo "$domain" | xargs)
    # If not empty, then add array counts as per values encountered
    if [[ -n "$cleaned_domains" ]]; then
      ((domain_counts["$cleaned_domains"]++))
    fi
  done
done <<< "$domain_column"

#===========================DETERMINE HIGHEST OCCURENCES==================================
# Placeholders to determine highest occurence counts
max_mech_count=0
max_mechanic="" 
max_dom_count=0
max_domain=""

# Loop over the keys of the arrays
for mechanic in "${!mechanic_counts[@]}"; do
  count_mech="${mechanic_counts[$mechanic]}"
  # Compare count to current highest. 
  # If current count is greater current highest, then update the current highest
  if [[ "$count_mech" -gt "$max_mech_count" ]]; then
    max_mech_count="$count_mech"
    max_mechanic="$mechanic"
  fi
done

# Loop over the keys of the arrays
for domain in "${!domain_counts[@]}"; do
  count_dom="${domain_counts[$domain]}"
  # Compare count to current highest. 
  # If current count is greater current highest, then update the current highest
  if [[ "$count_dom" -gt "$max_dom_count" ]]; then
    max_dom_count="$count_dom"
    max_domain="$domain"
  fi
done

#===========================PEARSON==================================
year_column=$(echo "$final" | cut -f3)
rating_column=$(echo "$final" | cut -f9)
complexity_column=$(echo "$final" | cut -f11)

# Placeholder for average/means
sum_year=0
count_year=0
sum_rating=0
count_rating=0

# Loop each line read from year_column. Store into variable year.
while IFS=$'\n' read -r year; do
    # If value is integer, then accumulate year to the sum_year
    # Count the rows and accumulate to count_year
    if [[ "$year" =~ ^[0-9]+$ ]]; then
        sum_year=$((sum_year + year))  
        count_year=$((count_year + 1)) 
    fi
done <<< "$year_column"
means_year=$(echo "scale=6; $sum_year / $count_year" | bc)  

# Loop each line read from year_column. Store into variable rating
while IFS=$'\n' read -r rating; do
    # If value is integer, then accumulate year to the sum_rating
    # Count the rows and accumulate to count_rating
    if [[ "$rating" =~ ^[0-9.]+$ ]]; then
        sum_rating=$(echo "$sum_rating + $rating" | bc)  
        count_rating=$((count_rating + 1)) 
    fi
done <<< "$rating_column"
means_rating=$(echo "scale=6; $sum_rating / $count_rating" | bc)  

# Placeholder for sum of differences from mean
sum_diff_year=0
sum_diff_rating=0

# Loop each line read from year_column. Store into variable year.
while IFS=$'\n' read -r year; do
    # If value is integer, calculate difference between the year and the mean 
    if [[ "$year" =~ ^[0-9]+$ ]]; then
        diff=$(echo "$year - $means_year" | bc)
        sum_diff_year=$(echo "$sum_diff_year + $diff" | bc)
    fi
done <<< "$year_column"

# Loop each line read from rating_column. Store into variable rating.
while IFS=$'\n' read -r rating; do
    # If value is integer, calculate difference between the rating and the mean 
    if [[ "$rating" =~ ^[0-9.]+$ ]]; then
        diff=$(echo "$rating - $means_rating" | bc)
        sum_diff_rating=$(echo "$sum_diff_rating + $diff" | bc)
    fi
done <<< "$rating_column"

# Array placeholders to store values from year and rating columns
declare -a years
declare -a ratings

# Read from two columns and assign to corresponding arrays
while IFS= read -r yline && IFS= read -r rline <&3; do
    years+=("$yline")
    ratings+=("$rline")
done <<< "$year_column" 3<<< "$rating_column"

# Placeholders for pearson formula
top=0
sum_sq_diff_year=0
sum_sq_diff_rating=0

# Loop over paired year and rating value
for ((i=0; i<${#years[@]}; i++)); do
    y="${years[i]}"
    r="${ratings[i]}"

    # If data is integer and has decimals, calculate the diff
    if [[ "$y" =~ ^[0-9]+$ && "$r" =~ ^[0-9.]+$ ]]; then
        diff_y=$(echo "$y - $means_year" | bc -l)
        diff_r=$(echo "$r - $means_rating" | bc -l)
        
        # Calculate the top part of the pearson formula
        prod=$(echo "$diff_y * $diff_r" | bc -l)
        top=$(echo "$top + $prod" | bc -l)

        # Calculate the botton part of the pearson formula
        sq_diff_y=$(echo "$diff_y * $diff_y" | bc -l)
        sum_sq_diff_year=$(echo "$sum_sq_diff_year + $sq_diff_y" | bc -l)

        sq_diff_r=$(echo "$diff_r * $diff_r" | bc -l)
        sum_sq_diff_rating=$(echo "$sum_sq_diff_rating + $sq_diff_r" | bc -l)
    fi
done

sqrt_year=$(echo "scale=10; sqrt($sum_sq_diff_year)" | bc -l)
sqrt_rating=$(echo "scale=10; sqrt($sum_sq_diff_rating)" | bc -l)
bottom=$(echo "$sqrt_year * $sqrt_rating" | bc -l)
pearson=$(echo "scale=6; $top / $bottom" | bc -l)

#===========================OUTPUT==================================
echo "The most popular game mechanics is $max_mechanic found in $max_mech_count games."
echo "The most game domain is $max_domain found in $max_dom_count games."
printf "The correlation between the year of publication and the average rating is %.3f\n" "$pearson"